@page "/"

<h3>PlayerTest</h3>

<div class="audio-visualizer">
    <img src="https://livemlaudiospecstorage.blob.core.windows.net/spectrogramspng/rpi_port_townsend_2020_11_22_12_22_38_PST.png" alt="Audio Image" />
    <div class="progress-line" id="progressLine"></div>
</div>
<button @onclick="PlayAudio">Play</button>
<button @onclick="PauseAudio">Pause</button>
<button @onclick="StopAudio">Stop</button>

<style>
    .audio-visualizer {
        position: relative;
        width: 100%; /* Adjust as needed */
        height: auto; /* Adjust as needed */
    }

        .audio-visualizer img {
            width: 100%;
            height: auto;
        }

    .progress-line {
        position: absolute;
        top: 0;
        left: 0;
        height: 100%;
        width: 3px; /* Adjust thickness of the line */
        background-color: white;
        display: none; /* Hide initially */
    }
</style>

@* @using Microsoft.AspNetCore.Components.Web
@using OrcaHello.Web.UI.Models

<div class="audio-visualizer" @onclick="SeekAudio">
    <img src="https://livemlaudiospecstorage.blob.core.windows.net/spectrogramspng/rpi_port_townsend_2020_11_22_12_22_38_PST.png" alt="Audio Image" />
    <div class="progress-line" id="progressLine"></div>
     <div class="time-display" id="timeDisplay"></div>
</div>
<button @onclick="PlayAudio">Play</button>
<button @onclick="PauseAudio">Pause</button>
<button @onclick="StopAudio">Stop</button>

<style>
    .audio-visualizer {
        position: relative;
        width: 100%; /* Adjust as needed */
        height: auto; /* Adjust as needed */
    }

        .audio-visualizer img {
            width: 100%;
            height: auto;
        }

    .progress-line {
        position: absolute;
        top: 0;
        left: 0;
        height: 100%;
        width: 3px; /* Adjust thickness of the line */
        background-color: white;
        display: none; /* Hide initially */
    }

    .time-display {
        position: absolute;
        bottom: 0;
        right: 0;
        background: rgba(0, 0, 0, 0.5); /* Semi-transparent background */
        color: white;
        padding: 5px;
        font-size: 14px;
    }
</style>

@code {
    private ElementReference audioVisualizerRef;
    private string audioFile = "https://livemlaudiospecstorage.blob.core.windows.net/audiowavs/rpi_port_townsend_2020_11_22_12_22_38_PST.wav"; // Replace with your actual .wav file path

    private async Task PlayAudio()
    {
        await JSRuntime.InvokeVoidAsync("howlerInterop.playSound", audioFile);
    }

    private async Task PauseAudio()
    {
        await JSRuntime.InvokeVoidAsync("howlerInterop.pauseSound");
    }

    private async Task StopAudio()
    {
        await JSRuntime.InvokeVoidAsync("howlerInterop.stopSound");
    }

    private async Task SeekAudio(MouseEventArgs e)
    {
        // Get the bounding rectangle of the audio visualizer
        var rect = await JSRuntime.InvokeAsync<DOMRect>("getBoundingClientRect", audioVisualizerRef);

        // Calculate the click position within the audio visualizer
        double clickPosition = e.ClientX - rect.Left;
        double imageWidth = rect.Width;

        // Seek the audio to the click position
        await JSRuntime.InvokeVoidAsync("howlerInterop.seekAudio", clickPosition, imageWidth);
    }

    // private bool isPlaying = false;
    private DotNetObjectReference<PlayerTest> objRef;

    // protected override void OnInitialized()
    // {
    //     objRef = DotNetObjectReference.Create(this);
    // }

    // private async Task PlayAudio()
    // {
    //     await JSRuntime.InvokeVoidAsync("howlerInterop.playSound", audioFile);
    //     await JSRuntime.InvokeVoidAsync("howlerInterop.startProgress");
    // }

    // private async Task PauseAudio()
    // {
    //     await JSRuntime.InvokeVoidAsync("howlerInterop.pauseSound");
    // }

    // private async Task StopAudio()
    // {
    //     await JSRuntime.InvokeVoidAsync("howlerInterop.stopSound");
    // }

    // private async Task PlayAudio()
    // {
    //     await JSRuntime.InvokeVoidAsync("howlerInterop.playSound", audioFile);
    //     isPlaying = true;
    // }

    // private async Task PauseAudio()
    // {
    //     if (isPlaying)
    //     {
    //         await JSRuntime.InvokeVoidAsync("howlerInterop.pauseSound");
    //         isPlaying = false;
    //     }
    // }

    // private async Task StopAudio()
    // {
    //     await JSRuntime.InvokeVoidAsync("howlerInterop.stopSound");
    //     isPlaying = false;
    // }

    public async ValueTask DisposeAsync()
    {
        objRef?.Dispose();
    }
 }
  *@